$Id: Dual_PG_Server,v 1.3 2005/04/20 21:18:37 toffe Exp $

Mise en place de deux serveurs PostgreSQL sur une seule machine.

Pré-requis
Tout d'abord il faut tenir compte du fait que cette opération a été
réalisée sur un système Debian, toutes références et indications ayant
attrait à des répertoires et des fichiers système sont donc en rapport
avec cette distribution.

Première phase
Pour commencer il faut installer le serveur ainsi que la contribution
permettant d'avoir l'autovaccum, outil fort utile ! Jetez un oeil à la
documentation, elle est très clair sur son utilitée:
http://www.postgresql.org/docs/7.4/interactive/maintenance.html#ROUTINE-VACUUMING
Nous avons donc à éxecuter la commande suivante:
    apt-get install postgresql postgresql-contrib
Très logiquement le paquet postgresql-client est installé également, ce
dernier contient le shell psql entre autres.
Suivez les instructions et faites votre installation «normalement».
Nous pouvons passer à la suite.

Seconde phase
Une fois que l'installation standard est finie il est temps d'entamer la
mise en place de notre futur second service postgresql. Pour ce faire il
faut commencer par copier la totalitée du répertoire de configuration:
    cp -rv /etc/postgresql/ /etc/postgresql_R
Comme on peut le voir, la nouvelle configuration sera donc dans
/etc/postgresql_R, à partir de maintenant le suffixe «_R» sera utilisé
pour indiqué tout répertoire ou programme servant à ce serveur. Pourquoi
«_R» me direz-vous ? En fait l'idée principale était de mettre en place
un service de réplication de base de donnée et d'avoir, en parallèle, un
service db pour un intranet, les deux indépendants.
Il faut alors modifier les fichiers qui font référence à ce répertoire
de configuration, à savoir postgresql.env et postmaster.conf.
    postgresql.env:
	La ligne
	« [ -r /etc/postgresql/postmaster.conf ] &&
	        . /etc/postgresql/postmaster.conf »
	devient
	« [ -r /etc/postgresql_R/postmaster.conf ] &&
	        . /etc/postgresql_R/postmaster.conf »
    postmaster.conf:
	La ligne
	« POSTGRES_DATA="/opt/data" »
	devient
	« POSTGRES_DATA="/opt/data_R" »
	Une configuration de base a généralement ces données dans
	/var/lib/postgresql/, pour ma part j'utilise /opt pour ce genre
	de service. Question de choix, à chacun d'adapter à sa
	convenance.
En suivant il faut modifier la configuration afin d'utiliser un autre
port pour ce serveur SQL, ici il faut modifier le fichier
postgresql.conf:
    La ligne
    « port = 5432 »
    devient
    « port = 5433 »
Dans ce même fichier il faut aussi, mais ce n'est pas obligatoire,
définir sur quelle IP le nouveau serveur va écouter:
    La ligne
    « virtual_host = '' »
    devient
    « virtual_host = '127.0.0.1 172.24.8.4 192.168.2.10' »

Phase trois
Maintenant que les fichiers de configuration sont modifiés il faut
également modifier le script d'initialisation.
Il faut comme précédement faire les modifications nécessaires au niveau
de l'entrée du répertoire de configuration:
« PGPORT=$(grep -si '^port *=' /etc/postgresql_R/postgresql.conf | cut
-f2 -d=) »
et aussi:
« if [ -r /etc/postgresql_R/postmaster.conf ]
then
    . /etc/postgresql_R/postmaster.conf
else    
    echo "/etc/postgresql_R/postmaster.conf is missing; \
    cannot start postgresql"
    exit 1
fi »
De la même manière il faut faire référence à CE script d'init:
« echo "Usage: /etc/init.d/postgresql_R {start|stop|autovac-start| \
  autovac-stop|restart|autovac-restart|reload|force-reload|status}" »
Dans le même registre il faut changer le nom du script de démarrage:
« PG_STARTUP=$PREFIX/bin/postgresql-startup_R »
Puis les fichiers de log:
« LOGFILE=${POSTGRES_LOG:-/var/log/postgresql/postgres_R.log} »
« AVAC_LOG=/var/log/postgresql/autovacuum_R_log »
Il faut également s'occuper du script suivant, qui change de nom
également:
« /usr/share/postgresql/startup-checks-root.sh_R »
J'ai également fait une modification afin de faire référence au port
d'écoute par défaut:
« OPTS="-D -p ${PGPORT:=5433}" »

