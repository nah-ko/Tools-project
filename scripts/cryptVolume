#!/bin/bash
#
# "little" shell-script to mount/umount an encrypted LUKS volume file,
# 

PROG=$(basename $0)
MYPID=$$
BEVERBOSE=false
E_OPTERROR=65

usage() {
cat << EOF

$PROG, Manage LUKS volume file (u)mount

Usage: $PROG -a ACTION VOLUME_FILE
    -a ACTION	What to do, mount or umount volume file
    VOLUME_FILE	Name of LUKS volume file (extension has to be ".vol")

EOF
    exit $E_OPTERROR
}

error() {
    echo $2
    exit $1
}

# Control if file given as parameter exist and is readable
checkFile() {
    test -r $1 || error 1 "$1 do not exists or unreadable"
}

# Control if a given command exists
requireCmd() {
    if [ -n "$1" ] ; then
	CMD=`which $1`
	if [ -x "$CMD" ] ; then
	    logger -t "$PROG[MYPID]" "Command [ $CMD ] : OK"
	else
	    error 1 "Command [ $1 ] unknown"
	fi
    fi
}


# Check if volume is linked to any loop device
has_loop() {
    # Verbose
    $BEVERBOSE && echo "--- has_loop ---"
    # Get loop device list, trying to find ours...
    sudo losetup --all|grep $1 2>&1 > /dev/null
    RES=`echo $?`
    if [ $RES -eq 0 ]
    then
	error $RES "FAILED: A loop device already exists for $1"
    else
	return 0
    fi
}

# Check... if volume mounted ?
is_mounted() {
    # Verbose
    $BEVERBOSE && echo "--- is_mounted ---"
    mount|grep $1 2>&1 > /dev/null
    RES=`echo $?`
    if [ $RES -eq 0 ]
    then
	error $RES "FAILED: Crypted volume is mounted"
    else
	return 0
    fi
}

# All operations needed before mounting the crypted device
mymount() {
    # Verbose
    $BEVERBOSE && echo "--- mymount ---"
    VOL=$1
    VOL_DEVICE=`basename $VOL .vol`

    is_mounted ${VOL_DEVICE}_crypt
    # Find a free loop device
    LOOP00=`losetup --find`

    # Check loop device and even loop volume on it
    has_loop $VOL && sudo losetup $LOOP00 $VOL

    # Check LUKS volume, if not assume it's a tcrypt one
    VOL_TYPE=luks
    sudo cryptsetup isLuks $VOL || VOL_TYPE=tcrypt
    # Open LUKS volume, associate it to device-mapper
    sudo cryptsetup open --type $VOL_TYPE $LOOP00 ${VOL_DEVICE}_crypt
    # Is open command ok ? fallback if not
    RES=$(echo $?)
    if [ $RES -eq 0 ]
    then
    # Other way to mount :
	udisksctl mount  --block-device /dev/mapper/${VOL_DEVICE}_crypt
	return 0
    else
	# Problem mounting device, revert process
	sudo cryptsetup close ${VOL_DEVICE}_crypt
	sudo losetup --detach $LOOP00
	return $RES
    fi
}

myumount() {
    # Verbose
    $BEVERBOSE && echo "--- myumount ---"
    VOL=$1
    VOLDEV=`basename $VOL .vol`

    # VOL must be umounted before closing crypted device
    #is_mounted ${VOLDEV}_crypt
    # Other way to unmount
    udisksctl unmount --block-device /dev/mapper/${VOLDEV}_crypt

    LOOP01=`losetup --associated ${VOL} | cut -d":" -f1`
    sudo cryptsetup close ${VOLDEV}_crypt
    sudo losetup --detach $LOOP01
}


# ---------------
# Main code
# ---------------
# Require some commands before going forward
requireCmd losetup
requireCmd cryptsetup
requireCmd udisksctl

if [ $# -eq 0 ]
then
    usage
    error 1 "ERROR: Missing arguments"
fi

while getopts ":dvha:" OPTIONS
do
    case $OPTIONS in
	d)
	    set -x
	    ;;
	v)
	    BEVERBOSE=true
	    ;;
	h)
	    usage
	    ;;
	a)
	    eval PARAMETER="`echo \\$$OPTIND`"
	    # be sure that the given file exists and is readable...
	    checkFile $PARAMETER
	    # just to be readable
	    volDev=$(basename $PARAMETER)
	    case $OPTARG in
		mount)
		    mymount $PARAMETER
		    echo "Now you can mount ${volDev}"
		    ;;
		umount)
		    myumount $PARAMETER
		    echo "Now ${volDev} is closed"
		    ;;
	    esac
	    ;;
        *)
	    error 1 "No matching option for -$OPTARG, retry."
	    ;;
	:)
	    error 1 "Missing parameter for $OPTARG"
	    ;;
    esac 
done
