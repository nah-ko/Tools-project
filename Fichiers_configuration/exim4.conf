######################################################################
#                  Runtime configuration file for Exim               #
#                                                                    #
# With help of S. Gross                                              #
#                                                                    #
######################################################################

# $Id$

ldap_default_servers = XXX

LDAP_USER = XXX
LDAP_PASS = XXX
LDAP_BASE = XXX

BOXES_ROOT = /var/mail

REAL_LOCAL_PART = ${extract{1}{+}{$local_part}}
REAL_ADDRESS = ${quote_ldap:REAL_LOCAL_PART}@${quote_ldap:$domain}
REAL_DOMAIN = ${quote_ldap:$domain}

LDAP_SEARCH_BASE = eximMail=REAL_ADDRESS,domain=REAL_DOMAIN,LDAP_BASE

LOCAL_DOMAINS = ${lookup ldapm {user=LDAP_USER pass=LDAP_PASS ldap:///LDAP_BASE?domain?sub?(&(objectClass=eximDomain)(domain=REAL_DOMAIN)(status=active))}}

BOX_DIRECTORY = ${lookup ldap {user=LDAP_USER pass=LDAP_PASS \
	ldap:///LDAP_SEARCH_BASE?spoolDirectory??}}

GET_FORWARD = ${lookup ldapm {user=LDAP_USER pass=LDAP_PASS \
	ldap:///LDAP_SEARCH_BASE?forward??(&(objectClass=eximAttributes)(status=active))}}

GET_PIPE = ${lookup ldapm {user=LDAP_USER pass=LDAP_PASS \
	ldap:///LDAP_SEARCH_BASE?pipe??(&(objectClass=eximAttributes)(status=active))}}

CHECK_ACTIVE_MAIL = ${lookup ldap {user=LDAP_USER pass=LDAP_PASS \
	ldap:///LDAP_SEARCH_BASE?status??(&(objectClass=eximAttributes)(|(spoolDirectory=*)(forward=*)(pipe=*)))}}

GET_BACKUP_MX = ${lookup ldap {user=LDAP_USER pass=LDAP_PASS \
	ldap:///domain=REAL_DOMAIN,LDAP_BASE?primaryMX??(&(objectClass=eximDomain)(status=active))}}

GET_DOMAIN_ALIAS = ${lookup ldap {user=LDAP_USER pass=LDAP_PASS \
	ldap:///domain=REAL_DOMAIN,LDAP_BASE?domainAlias??(&(objectClass=eximDomain)(status=active))}}

CHECK_DOMAIN_ALIAS_ACTIVE = ${lookup ldap {user=LDAP_USER pass=LDAP_PASS \
	ldap:///eximMail=${quote_ldap:REAL_LOCAL_PART}@${quote_ldap:GET_DOMAIN_ALIAS},domain=${quote_ldap:GET_DOMAIN_ALIAS},LDAP_BASE?status??(objectClass=eximAttributes)}}

VACATION_TEXT =  ${lookup ldap {user=LDAP_USER pass=LDAP_PASS \
	ldap:///LDAP_SEARCH_BASE?vacationText??(&(objectClass=eximAttributes)(status=active))}}

VACATION_SUBJECT = ${lookup ldap {user=LDAP_USER pass=LDAP_PASS \
	ldap:///LDAP_SEARCH_BASE?vacationSubject??(&(objectClass=eximAttributes)(status=active))}}

GET_QUOTA = ${lookup ldap {user=LDAP_USER pass=LDAP_PASS \
	ldap:///LDAP_SEARCH_BASE?boxQuota??(&(objectClass=eximAttributes))}}


######################################################################
#                    MAIN CONFIGURATION SETTINGS                     #
######################################################################

primary_hostname = mail.nah-ko.org

domainlist local_domains = LOCAL_DOMAINS
domainlist relay_to_domains =
hostlist   relay_from_hosts = /etc/exim4/dbms/relay_from_hosts
#hostlist   auth_relay_hosts = *
hostlist   auth_over_tls_hosts = *


acl_smtp_connect = acl_check_connect
acl_smtp_helo = acl_check_helo
acl_smtp_starttls = acl_check_tls
acl_smtp_mail = acl_check_mail
acl_smtp_rcpt = acl_check_rcpt
acl_smtp_data = acl_check_data
acl_smtp_auth = acl_check_auth

log_selector = +tls_cipher +tls_peerdn
#tls_advertise_hosts = *
#tls_advertise_hosts = ${if eq{$tls_cipher}{}{}{*}}
tls_advertise_hosts = ${if exists {/etc/exim4/exim.crt}{*}{127.0.0.1/8}}
#tls_verify_hosts = *
#tls_try_verify_hosts = *
#tls_verify_certificates = /etc/exim4/exim.crt
tls_certificate = /etc/exim4/exim.crt
tls_privatekey = /etc/exim4/exim.key

host_lookup = *

rfc1413_hosts = *
rfc1413_query_timeout = 0s

ignore_bounce_errors_after = 2d

timeout_frozen_after = 7d

received_header_text = "Received: \
	${if def:sender_rcvhost {from ${sender_rcvhost}\n\t}\
	{${if def:sender_ident {from ${sender_ident} }}\
	${if def:sender_helo_name {(helo=${sender_helo_name})\n\t}}}}\
	by ${primary_hostname} \
	${if def:received_protocol {with ${received_protocol}}} \
	${if def:tls_cipher {\n\t(Cipher ${tls_cipher}) }}\
	${if def:tls_peerdn {(PeerDN ${tls_peerdn}) }}\
	(Exim ${version_number} ${compile_number} (Debian))\n\t\
	id ${message_id}\
	${if def:authenticated_id { by authid <$authenticated_id>}}\
	${if def:sender_host_authenticated { with $sender_host_authenticated}}\
	${if def:received_for {\n\tfor <$received_for>}}"



######################################################################
#                       ACL CONFIGURATION                            #
#         Specifies access control lists for incoming SMTP mail      #
######################################################################

begin acl

acl_check_connect:
	drop	!verify=reverse_host_lookup
				message = \
					Your host MUST provide a reverse IP address to connect here.\n\
					Bye dude!
	accept

acl_check_helo:
	drop	condition = ${if eq{$sender_helo_name}{$primary_hostname}{yes}{no}}
				message = \
					Invalid HELO data.\n\
					Bye dude!
	accept

acl_check_tls:
	accept

acl_check_mail:
	drop	condition = ${if eq{$sender_helo_name}{}{yes}{no}}
				message = \
					HELO/EHLO required by SMTP RFC.\n\
					Bye dude!
	drop	!verify = sender/no_details
#	drop	!verify = sender
				message = \
					Unrouteable sender address.\n\
					Bye dude!
	drop	!verify = sender/callout=45s
				message = \
					Your email address is rejected by your mail server.\n\
					You can't send mail here with a fake address.\n\
					Bye dude!
	accept

acl_check_rcpt:
	accept	condition = ${if eq {GET_BACKUP_MX} {} {no} {yes}}
	drop	!verify = recipient
				!domains = +local_domains
				message = \
					Unroutable recipient address.\n\
					Bye dude!
	accept	condition = ${if eq {CHECK_DOMAIN_ALIAS_ACTIVE} {active} {yes} {no}}
					
	drop	condition = ${if eq{CHECK_ACTIVE_MAIL} {active} {no} {yes}}
				domains = +local_domains
				message = \
					Mail box not found on this system.\n\
					Bye dude!
	#accept condition = ${if eq {$authentication_failed} {} {1} {0}}
	#accept condition = ${if eq{$tls_cipher}{}{}{*}}
	accept authenticated = *
	accept hosts = +relay_from_hosts
	accept domains = +local_domains
	drop	 message = \
					Relay denied\n\
					Bye dude!

acl_check_data:
	accept	condition = ${if eq {GET_BACKUP_MX} {} {yes} {no}}
	deny	condition = ${if eq {$header_subject:} {} {yes} {no} }
				message = \
					No empty subject field allowed on this system.\n\
					Bye dude!
	deny	condition = ${if eq {$header_to:} {} {yes} {no} }
				message = \
					No undisclosed recipient allowed on this system.\n\
					Bye dude!
	accept

acl_check_auth:
  accept  hosts = +auth_over_tls_hosts
		endpass
		message = STARTTLS required before AUTH
		encrypted = *
	accept


# A voir plus tard
# http://duncanthrax.net/exiscan-acl/
acl_check_content:

  # First unpack MIME containers and reject serious errors.
  deny  message = This message contains a MIME error ($demime_reason)
        demime = *
        condition = ${if >{$demime_errorlevel}{2}{1}{0}}
        
  # Reject typically wormish file extensions. There is almost no
  # sense in sending such files by email.
  deny  message = This message contains an unwanted file extension ($found_extension)
        demime = scr:vbs:bat:lnk:pif
  
  # Reject virus infested messages.
  deny  message = This message contains malware ($malware_name)
        malware = *

  # Reject messages containing "viagra" in all kinds of whitespace/case combinations
  # WARNING: this is an example !
  deny  message = This message matches a blacklisted regular expression ($regex_match_string)
        regex = [Vv] *[Ii] *[Aa] *[Gg] *[Rr] *[Aa]

  # Always add X-Spam-Score and X-Spam-Report headers, using SA system-wide settings
  # (user "nobody"), no matter if over threshold or not.
  warn  message = X-Spam-Score: $spam_score ($spam_bar)
        spam = nobody:true
  warn  message = X-Spam-Report: $spam_report
        spam = nobody:true

  # Add X-Spam-Flag if spam is over system-wide threshold
  warn message = X-Spam-Flag: YES
       spam = nobody

  # Reject spam messages with score over 10, using an extra condition.
  deny  message = This message scored $spam_score points. Congratulations!
        spam = nobody:true
        condition = ${if >{$spam_score_int}{100}{1}{0}}

  # finally accept all the rest
  accept
  

######################################################################
#                      ROUTERS CONFIGURATION                         #
#               Specifies how addresses are handled                  #
######################################################################
#     THE ORDER IN WHICH THE ROUTERS ARE DEFINED IS IMPORTANT!       #
# An address is passed to each router in turn until it is accepted.  #
######################################################################

begin routers

dnslookup:
  driver = dnslookup
  domains = ! +local_domains
  transport = remote_smtp
  ignore_target_hosts = 0.0.0.0 : 127.0.0.0/8
  no_more

mx_backup:
	driver = accept 
	condition = ${if eq {GET_BACKUP_MX} {} {no} {yes}}
	transport = smtp_backup
	no_more

domain_alias:
	driver = redirect
	condition = ${if eq {GET_DOMAIN_ALIAS} {} {no} {yes}}
	hide data = $local_part@GET_DOMAIN_ALIAS
#	no_verify
	check_ancestor
	no_more

system_aliases:
  debug_print = "R: system_aliases for $local_part@$domain"
  driver = redirect
  domains = +local_domains
  allow_fail
  allow_defer
	condition = ${if eq {GET_PIPE} {} {no} {yes}}
  data = GET_PIPE
#  user = list
#  group = mail
  file_transport = address_file
  pipe_transport = address_pipe
# directory_transport = address_directory

pure_forward:
	driver = redirect
	condition = ${if eq {BOX_DIRECTORY} {} {yes} {no}}
	data = GET_FORWARD
#	no_verify
	no_expn
	check_ancestor
	no_more

virtual_forward:
	driver = redirect
	condition = ${if eq {GET_FORWARD} {} {no} {yes}}
	data = GET_FORWARD
#	no_verify
	no_expn
	check_ancestor
	unseen

vacation:
	driver = accept
	condition = ${if eq {VACATION_TEXT} {} {no} {yes}}
	transport = vacation_reply
	unseen

virtual_user:
	driver = accept
	condition = ${if eq{BOX_DIRECTORY} {} {no} {yes} }
  domains = +local_domains
	transport = virtual_delivery
	no_more

######################################################################
#                      TRANSPORTS CONFIGURATION                      #
######################################################################
#                       ORDER DOES NOT MATTER                        #
#     Only one appropriate transport is called for each delivery.    #
######################################################################

begin transports

remote_smtp:
  driver = smtp

virtual_delivery:
	driver = appendfile
	delivery_date_add
	envelope_to_add
	return_path_add
	#group = mail
	#user = Debian-exim
	#user = REAL_LOCAL_PART
	mode = 0660
	hide directory = BOXES_ROOT/BOX_DIRECTORY/Maildir
	create_directory
	quota = GET_QUOTA
	quota_size_regex = S=(\d+)$
	quota_warn_threshold = 90%
	quota_warn_message = "\
		To: REAL_LOCAL_PART@$domain\n\
		Subject: Your mailbox is nearly over quota\n\n\
		This message is automatically created \
		by mail delivery software.\n\n\
		The size of your mailbox has exceeded \
		a warning theshold that is set \n\
		by the system administrator.\n"
	maildir_format=true
	maildir_tag= ,S=$message_size

smtp_backup:
	driver = smtp
	connect_timeout = 60s
	command_timeout = 5m
	final_timeout = 10m
	delay_after_cutoff = false
	multi_domain = false
	hosts = GET_BACKUP_MX

vacation_reply:
	driver = autoreply
	#user = Debian-exim
	#user = REAL_LOCAL_PART
	from = $local_part@$domain 
	to = $sender_address
	subject = ${if eq {VACATION_SUBJECT} {} {[Autoreply] was: $header_Subject: } {VACATION_SUBJECT}}
	text = VACATION_TEXT
	once = BOXES_ROOT/BOX_DIRECTORY/.vacation.dbm

address_reply:
  driver = autoreply

address_file:
  debug_print = "T: address_file for $local_part@$domain"
  driver = appendfile
  delivery_date_add
  envelope_to_add
  return_path_add

address_pipe:
  debug_print = "T: address_pipe for $local_part@$domain"
  driver = pipe
  path = /usr/bin:/bin:/usr/local/bin
  #return_fail_output
  return_output
  user = toffe


######################################################################
#                      RETRY CONFIGURATION                           #
######################################################################

begin retry

# Address or Domain    Error       Retries
# -----------------    -----       -------

*                      *           F,2h,15m; G,16h,1h,1.5; F,4d,6h



######################################################################
#                      REWRITE CONFIGURATION                         #
######################################################################

# There are no rewriting specifications in this default configuration file.

begin rewrite

*@localhost    ${1}@nah-ko.org E
*@bilbo.home    ${1}@nah-ko.org E
*@mail.nah-ko.org    ${1}@nah-ko.org E


######################################################################
#                   AUTHENTICATION CONFIGURATION                     #
######################################################################

# There are no authenticator specifications in this default configuration file.

begin authenticators

# Found with help of: http://www.wlug.org.nz/EximSmtpAuth

login_server:
  driver = plaintext
  public_name = LOGIN
  server_prompts = "LDAP Username:: : LDAP Password::"
  server_condition = "${lookup ldap { user=${lookup ldapdn{ldap:///LDAP_BASE?dn?sub?(eximMail=$1)}} \
		pass=$2 \
		ldap:///LDAP_BASE?eximMail?sub?(eximMail=$1)} \
		{yes}fail}"
  server_set_id = $1

#plain_server:
  #driver = plaintext
  #public_name = PLAIN
  #server_advertise_condition = ${if eq{$tls_cipher}{}{0}{1}}
  #server_condition = "${if crypteq { $3 } { GET_PASSWORD } {1} {0} }"
  #server_set_id = $2
  #server_prompts = :

######################################################################
#                   CONFIGURATION FOR local_scan()                   #
######################################################################

# If you have built Exim to include a local_scan() function that contains
# tables for private options, you can define those options here. Remember to
# uncomment the "begin" line. It is commented by default because it provokes
# an error with Exim binaries that are not built with LOCAL_SCAN_HAS_OPTIONS
# set in the Local/Makefile.

# begin local_scan


# End of Exim configuration file

# vim:ts=2
